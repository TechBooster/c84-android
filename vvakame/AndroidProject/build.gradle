import groovy.xml.MarkupBuilder

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'com.android.tools.build:gradle:0.5.+' }
}

apply plugin: 'android'
apply plugin: 'eclipse'

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext {
	generatedSrc = "gen"
	jppVersion = "1.6.2"

	jsonpullparserGenclassPostfix = "Gen"
	jsonpullparserDebug = "true"
}

repositories { mavenCentral() }

configurations { apt }

dependencies {
	compile 'com.google.android:support-v4:r7'
	compile 'net.vvakame:jsonpullparser-core:1.6.2'
	compile 'org.twitter4j:twitter4j-core:3.0.3'

	apt 'net.vvakame:jsonpullparser-apt:1.6.2'
}

android {
	compileSdkVersion 17
	buildToolsVersion "17.0.0"

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			resources.srcDirs = ['src']
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		instrumentTest.setRoot('../AndroidProjectTest/src')
		instrumentTest {
			java.srcDirs = ['../AndroidProjectTest/src']
			res.srcDirs = ['../AndroidProjectTest/src']
			assets.srcDirs = ['../AndroidProjectTest/assets']
			resources.srcDirs = ['../AndroidProjectTest/src']
		}
	}

	defaultConfig { testInstrumentationRunner "android.test.InstrumentationTestRunner" }
}

// for eclipse
sourceSets {
	main {
		java { srcDirs 'src', generatedSrc }
		output.classesDir = "bin/classes"
	}
}

// for apt
android.applicationVariants.each { variant ->
	def aptOutput = file(generatedSrc)

	variant.javaCompile.doFirst {
		println "*** compile doFirst ${variant.name}, aptOutput=${aptOutput}"
		aptOutput.mkdirs()
		aptOutput.eachFileRecurse groovy.io.FileType.FILES, {
			if (it.name.equals('R.java')) {
				return
			}
			it.delete()
		}
		variant.javaCompile.options.compilerArgs += [
			'-processorpath',
			configurations.apt.getAsPath(),
			'-AandroidManifestFile=' + variant.processResources.manifestFile,
			'-s',
			aptOutput
		]
	}
}

// for eclipse

task copyDependenciesToAndroidLibs(type: Copy) {
	into "libs"
	from configurations.compile

	eclipseJdt.dependsOn copyDependenciesToAndroidLibs
}

task copyFactoriesToFactoryDir(type: Copy) {
	into "factory"
	from configurations.apt

	eclipseJdt.dependsOn copyFactoriesToFactoryDir
}

task cleanDependenciesToAndroidLibs() {
	delete "libs"
	delete "factory"
	delete ".settings"
	delete ".factorypath"

	cleanEclipseJdt.dependsOn cleanDependenciesToAndroidLibs
}

eclipse {
	project {
		name = 'AndroidProject'
		natures = [
			'com.android.ide.eclipse.adt.AndroidNature',
			'org.eclipse.jdt.core.javanature'
		]
		buildCommands.clear()
		[
			'com.android.ide.eclipse.adt.ResourceManagerBuilder',
			'com.android.ide.eclipse.adt.PreCompilerBuilder',
			'org.eclipse.jdt.core.javabuilder',
			'com.android.ide.eclipse.adt.ApkBuilder'
		].each { buildCommand it }
	}
	classpath {
		containers.clear()
		containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES', 'com.android.ide.eclipse.adt.DEPENDENCIES'

		downloadSources = true
		downloadJavadoc = true
	}
	jdt {
		file {
			withProperties { properties ->
				properties.setProperty("org.eclipse.jdt.core.compiler.processAnnotations", "enabled")
			}
		}
	}
}

def writeEclipseSettings(File f, String s) {
	f.getParentFile().mkdirs()

	def w = new FileWriter(f)
	w.write(s)
	w.close()
}

eclipseJdt {
	doFirst {
		def f = file(".factorypath")
		def w = new FileWriter(f)

		def xml = new MarkupBuilder(w)
		xml.setDoubleQuotes(true)
		xml."factorypath"() {
			"factorypathentry"(
					kind: "PLUGIN", id: "org.eclipse.jst.ws.annotations.core", enabled: true, runInBatchMode: false
					)
			"factorypathentry"(
					kind: "WKSPJAR", id: "/${project.name}/factory/jsonpullparser-apt-${jppVersion}.jar", enabled: true, runInBatchMode: false
					)
		}
		w.close()

		writeEclipseSettings file(".settings/org.eclipse.jdt.apt.core.prefs"), """
			|eclipse.preferences.version=1
			|org.eclipse.jdt.apt.aptEnabled=true
			|org.eclipse.jdt.apt.genSrcDir=${generatedSrc}
			|org.eclipse.jdt.apt.processorOptions/JsonPullParserClassPostfix=${jsonpullparserGenclassPostfix}
			|org.eclipse.jdt.apt.processorOptions/JsonPullParserDebug=${jsonpullparserDebug}
			|org.eclipse.jdt.apt.reconcileEnabled=false
			|""".stripMargin()
	}
}
